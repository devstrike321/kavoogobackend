const express = require('express');
const router = express.Router();
const {
  login,
  getTeamMembers,
  addTeamMember,
  getTeamMember,
  editTeamMember,
  getPartners,
  getPartner,
  editPartner,
  getUsers,
  getUser,
  getCampaigns,
  addMobileProvider,
  editMobileProvider,
  getMobileProviders,
} = require('../controllers/adminUserController');
const { protect, adminAuth, teamAuth, dashboardAuth } = require('../middleware/auth');

router.post('/login', login);
router.get('/team', protect, adminAuth, getTeamMembers);
router.post('/team', protect, adminAuth, addTeamMember);
router.patch('/team/:id', protect, adminAuth, editTeamMember);
router.get('/team/:id', protect, adminAuth, getTeamMember);
router.get('/partners', protect, teamAuth, getPartners);
router.get('/partners/:id', protect, teamAuth, getPartner);
router.patch('/partners/:id', protect, dashboardAuth, editPartner);
router.get('/users', protect, dashboardAuth, getUsers);
router.get('/users/:id', protect, dashboardAuth, getUser);
router.get('/campaigns', protect, teamAuth, getCampaigns);
router.post('/providers', protect, adminAuth, addMobileProvider);
router.patch('/providers/:id', protect, adminAuth, editMobileProvider);
router.get('/providers', protect, adminAuth, getMobileProviders);

module.exports = router;const express = require('express');
const router = express.Router();
const { getAnalytics } = require('../controllers/analyticsController');
const { protect, dashboardAuth } = require('../middleware/auth');

router.get('/', protect, dashboardAuth, getAnalytics);

module.exports = router;const express = require('express');
const router = express.Router();
const path = require('path');
const { Partner } = require('../models');
// Additional campaign routes if needed beyond user/partner

// For admin to create campaigns
const Campaign = require('../models/campaignSchema');
const multer = require('multer');
const multerS3 = require('multer-s3');
const AWS = require('aws-sdk');
const { protect, dashboardAuth } = require('../middleware/auth');

const { createCampaign } = require('../controllers/partnerController');

const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
});

const upload = multer({
  storage: multerS3({
    s3,
    bucket: process.env.AWS_BUCKET,
    metadata: (req, file) => ({ fieldName: file.fieldname }),
    key: (req, file) => `videos/${Date.now()}_${file.originalname}`,
  }),
});

const upload1 = multer({
  storage: multer.diskStorage({
    destination: (req,file,cb) => {
      cb(null, './public/uploads');
    },
    filename: (req, file, cb) => {
      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
      cb(null, uniqueSuffix + path.extname(file.originalname));
    }
  }),
})

router.get('/:id', protect, dashboardAuth, async (req, res) => {
  console.log(req.params.id);
  const campaigns = await Campaign.findByPk(
    req.params.id,
    { include: [{ model: Partner }] }
  );
  if (!campaigns) return res.status(404).json({ error: 'Campaign not found' });
  console.log(campaigns);
  res.json(campaigns);
});
router.post('/', protect, dashboardAuth, upload1.single('video'), createCampaign);

module.exports = router;const express = require('express');
const router = express.Router();
const multer = require('multer');
const multerS3 = require('multer-s3');
const AWS = require('aws-sdk');
const { editDetails, getCampaigns, getDetail } = require('../controllers/partnerController');
const { protect, partnerAuth, dashboardAuth } = require('../middleware/auth');

router.patch('/me', protect, partnerAuth, editDetails);
router.get('/campaigns', protect, partnerAuth, getCampaigns);
router.get('/:id', protect, dashboardAuth, getDetail);

module.exports = router;const express = require('express');
const router = express.Router();
const { getTransactions, exportTransactions, getTransaction } = require('../controllers/transactionController');
const { protect, teamAuth, dashboardAuth } = require('../middleware/auth');

router.get('/', protect, dashboardAuth, getTransactions);
router.get('/export', protect, teamAuth, exportTransactions);
router.get('/:id', protect, dashboardAuth, getTransaction);

module.exports = router;const express = require('express');
const router = express.Router();
const {
  requestOTP,
  verifyOTP,
  onboardProfile,
  editProfile,
  getProfile,
  getCampaigns,
  getCampaignDetail,
  submitCampaign,
  transferMoney,
} = require('../controllers/userController');
const { protect, userAuth } = require('../middleware/auth');

router.post('/otp', requestOTP);
router.post('/verify', verifyOTP);
router.patch('/onboard', protect, userAuth, onboardProfile);
router.patch('/', protect, userAuth, editProfile);
router.get('/me', protect, userAuth, getProfile);
router.get('/campaigns', protect, userAuth, getCampaigns);
router.get('/campaigns/:id', protect, userAuth, getCampaignDetail);
router.post('/submit', protect, userAuth, submitCampaign);
router.post('/transfer', protect, userAuth, transferMoney);

module.exports = router;const express = require('express');
const dotenv = require('dotenv');
const AWS = require('aws-sdk');
const cors = require('cors');
const path = require('path');
const sequelize = require('./config/db');
const swaggerUi = require('swagger-ui-express');
const YAML = require('yamljs');
const swaggerDocument = YAML.load('./swagger.yaml');


dotenv.config();
sequelize.sync(); // or sequelize.sync({ force: true }) for development

const app = express();
app.use(express.json());

app.use(cors({
	origin: 'http://localhost:3000',
	methods: ['GET','POST','PUT','DELETE','OPTIONS','PATCH'],
	allowedHeaders: ['Content-Type', 'Authorization'],
}));

app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

app.use(express.static(path.join(__dirname, 'public')));

// Routes
app.use('/api/users', require('./routes/userRoutes'));
app.use('/api/partners', require('./routes/partnerRoutes'));
app.use('/api/admins', require('./routes/adminUserRoutes'));
app.use('/api/campaigns', require('./routes/campaignRoutes'));
//app.use('/api/providers', require('./routes/providerRoutes'));
app.use('/api/transactions', require('./routes/transactionRoutes'));
app.use('/api/analytics', require('./routes/analyticsRoutes'));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));